files:
  # SHA3
  - name: libcrux_iot_sha3
    api:
      exact:
        - [libcrux_iot_sha3, sha224]
        - [libcrux_iot_sha3, sha256]
        - [libcrux_iot_sha3, sha384]
        - [libcrux_iot_sha3, sha512]
        - [libcrux_iot_sha3, sha224_ema]
        - [libcrux_iot_sha3, sha256_ema]
        - [libcrux_iot_sha3, sha384_ema]
        - [libcrux_iot_sha3, sha512_ema]
        - [libcrux_iot_sha3, shake128_ema]
        - [libcrux_iot_sha3, shake256_ema]
    internal:
      patterns:
        - [libcrux_iot_sha3, "*"]
        - [libcrux_iot_sha3, portable, "*"]
        - [libcrux_iot_sha3, keccak, "*"]
        - [libcrux_iot_sha3, state, "*"]
        - [libcrux_iot_sha3, lane, "*"]
      monomorphizations_of:
        - [libcrux_iot_sha3, "*"]
        - [libcrux_iot_sha3, portable, "*"]
        - [libcrux_iot_sha3, keccak, "*"]
        - [libcrux_iot_sha3, state, "*"]
        - [libcrux_iot_sha3, lane, "*"]
      monomorphizations_using:
        - [libcrux_iot_sha3, "*"]
        - [libcrux_iot_sha3, portable, "*"]
        - [libcrux_iot_sha3, keccak, "*"]
        - [libcrux_iot_sha3, state, "*"]
        - [libcrux_iot_sha3, lane, "*"]

  # Common parts of SHA3 (this catches stuff that hasn't matched above). Must
  # come after the (more precise) patterns above concerning platform-specific hash_functions
  - name: libcrux_iot_sha3_internal
    internal:
      patterns:
        - [libcrux_iot_sha3, "*"]
      monomorphizations_of:
        - [libcrux_iot_sha3, "*"]
      monomorphizations_using:
        - [libcrux_iot_sha3, "*"]
    inline_static: true


      
# MLDSA-65
  - name: libcrux_mldsa65_portable
    api:
      patterns:
        - [libcrux_iot_ml_dsa, "*"]
        - [libcrux_iot_ml_dsa, samplex4, portable, "*"]
        - [libcrux_iot_ml_dsa, simd, "*"]
        - [libcrux_iot_ml_dsa, hash_functions, portable, "*"]
        - [libcrux_iot_ml_dsa, ml_dsa_65, portable, "*"]
        - [libcrux_iot_ml_dsa, ml_dsa_generic, instantiations, portable, "*"]
        # - [libcrux_iot_ml_dsa, pre_hash, PreHashResult]
        # - [core, option, Option_84]
      monomorphizations_of:
        - [libcrux_iot_ml_dsa, polynomial, "*" ]
        - [libcrux_iot_ml_dsa, simd, "*"]
        - [libcrux_iot_ml_dsa, hash_functions, portable, "*"]
        - [libcrux_iot_ml_dsa, ml_dsa_65, portable]
        - [libcrux_iot_ml_dsa, ml_dsa_generic, instantiations, portable, "*"]
        # - [libcrux_iot_ml_dsa, pre_hash, PreHashResult]
        # - [core, option, Option_84]
      monomorphizations_using:
        - [libcrux_iot_ml_dsa, polynomial, "*" ]
        - [libcrux_iot_ml_dsa, simd, "*"]
        - [libcrux_iot_ml_dsa, hash_functions, portable, "*"]
        - [libcrux_iot_ml_dsa, ml_dsa_generic, instantiations, portable, "*"]
        - [libcrux_iot_ml_dsa, pre_hash, "*"]
        # - [libcrux_iot_ml_dsa, pre_hash, PreHashResult]
      # monomorphizations_exact:
        # - [libcrux_iot_ml_dsa, pre_hash, PreHashResult]
        # - [core, result, Result_a8]
        # - [core, option, Option_84]

  # MLKEM: MISC NON-ARCHITECTURE SPECIFIC HEADERS
  - name: libcrux_core
    private:
      monomorphizations_of:
        - [core, "*"]
        - [ libcrux_secrets, "*"]
        - [libcrux_iot_ml_dsa, types, "*"]
        - [libcrux_iot_ml_dsa, utils, "*" ]
      monomorphizations_using:
        - [Eurydice, "*" ]
        - [libcrux_iot_ml_dsa, types, "*"]
      patterns:
        - [core, "*"]
        - [ libcrux_secrets, "*"]
        - [libcrux_iot_ml_dsa, types ]
        - [libcrux_iot_ml_dsa, constants ]
        - [libcrux_iot_ml_dsa, utils, "*" ]
        # - [libcrux_iot_ml_dsa, simd, traits ]
    api:
      - [Eurydice, "*"]

  # We let monomorphization insert things at the right place in each one of the
  # 9 variants above. Helpers that have not been assigned into any of the
  # individual libcrux_mlkemXXX files end up in a catch-all.
  - name: libcrux_mldsa_common
    private:
      - [libcrux_iot_ml_dsa, "*"]
    inline_static: true
